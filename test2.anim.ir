image {
  url = arg 0
  element = svg_new image
  svg_assign element "href" url
  return element
}

test {
  a = arg 0
  fill_ = arg 1
  element = svg_new rect
  svg_assign element "width" a
  svg_assign element "height" a
  svg_assign element "fill" fill_
  return element
}

fadeIn {
  local_percent = arg 0
  tree = arg 1
  element = svg_new g
  svg_assign element "opacity" local_percent
  svg_append element tree
  return element
}

fadeOut {
  local_percent = arg 0
  tree = arg 1
  _0 = 1.0
  _1 = _0 - local_percent
  element = svg_new g
  svg_assign element "opacity" _1
  svg_append element tree
  return element
}

fadeTest {
  time = arg 0
  tree = arg 1
  play time tree [fadeIn]
  play time tree [fadeOut]
}

main {
  _0 = "test.png"
  _1 = call image [_0]
  _2 = call center [_1]
  _ = intrinsic debug [_2]
  _3 = 10s
  _4 = call fadeTest [_3, _2]
}


boundingBox {
  _0 = arg 0
  _1 = intrinsic boundingBox [_0]
  return _1
}

center {
  _0 = arg 0
  box = call boundingBox [_0]

  # x = -1 * (box.width/2)
  _1 = -1
  _2 = getfield box width
  _3 = 2
  _4 = _2 / _3
  x = _1 * _4

  
  # y = -1 * (box.height/2)
  _5 = -1
  _6 = getfield box height
  _7 = 2
  _8 = _6 / _7
  y = _5 * _8

  # return <g :transform="translate(x,y)"> {{ svg }} </g>
  _9 = svg_new g
  _10 = "translate("
  _11 = _10 + x
  comma = ","
  _12 = _11 + comma
  _13 = _12 + y
  close_paren = ")"
  _14 = _13+ close_paren
  svg_assign _9 "transform" _14
  svg_append _9 _0

  return _9

}